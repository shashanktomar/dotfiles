#!/usr/bin/env -S uv run --script
# /// script
# dependencies = [
#   "rich>=13.0.0",
# ]
# ///

import os
import subprocess
import time
import argparse
import sys
from typing import Optional, List, Dict, Any
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.prompt import Prompt, Confirm

console = Console()

class TmuxController:
    def __init__(self):
        self.inside_tmux = self._detect_tmux_environment()
        self.session_name = os.environ.get('TMUX_SESSION', 'main')
        
    def _detect_tmux_environment(self) -> bool:
        """Detect if we're running inside tmux."""
        return 'TMUX' in os.environ
    
    def _run_tmux_command(self, args: List[str]) -> subprocess.CompletedProcess:
        """Execute a tmux command and return the result."""
        cmd = ['tmux'] + args
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, check=True)
            return result
        except subprocess.CalledProcessError as e:
            console.print(f"[red]Tmux command failed: {' '.join(cmd)}[/red]")
            console.print(f"[red]Error: {e.stderr}[/red]")
            raise
    
    def list_sessions(self) -> List[Dict[str, str]]:
        """List all tmux sessions."""
        try:
            result = self._run_tmux_command(['list-sessions', '-F', '#{session_name}\t#{?session_attached,attached,not attached}\t#{session_windows}'])
            sessions = []
            for line in result.stdout.strip().split('\n'):
                if line:
                    parts = line.split('\t')
                    sessions.append({
                        'name': parts[0],
                        'status': parts[1],
                        'windows': parts[2]
                    })
            return sessions
        except subprocess.CalledProcessError:
            return []
    
    def list_panes(self, session: Optional[str] = None) -> List[Dict[str, str]]:
        """List all panes in a session or globally."""
        try:
            if session:
                args = ['list-panes', '-t', session, '-F', 
                       '#{session_name}\t#{window_index}\t#{pane_index}\t#{pane_id}\t#{pane_current_command}\t#{pane_title}']
            else:
                args = ['list-panes', '-a', '-F', 
                       '#{session_name}\t#{window_index}\t#{pane_index}\t#{pane_id}\t#{pane_current_command}\t#{pane_title}']
            result = self._run_tmux_command(args)
            panes = []
            for line in result.stdout.strip().split('\n'):
                if line:
                    parts = line.split('\t')
                    panes.append({
                        'session': parts[0],
                        'window': parts[1],
                        'pane': parts[2],
                        'pane_id': parts[3],
                        'command': parts[4],
                        'title': parts[5] if len(parts) > 5 else ''
                    })
            return panes
        except subprocess.CalledProcessError:
            return []
    
    def create_session(self, session_name: str, command: Optional[str] = None) -> bool:
        """Create a new tmux session."""
        try:
            args = ['new-session', '-d', '-s', session_name]
            if command:
                args.extend(['-c', os.getcwd(), command])
            self._run_tmux_command(args)
            console.print(f"[green]Created session: {session_name}[/green]")
            return True
        except subprocess.CalledProcessError:
            return False
    
    def create_pane(self, target: str, command: Optional[str] = None, vertical: bool = False) -> Optional[str]:
        """Create a new pane in the specified target."""
        try:
            args = ['split-window']
            if vertical:
                args.append('-v')
            else:
                args.append('-h')
            args.extend(['-t', target, '-P', '-F', '#{pane_id}'])
            if command:
                args.append(command)
            
            result = self._run_tmux_command(args)
            pane_id = result.stdout.strip()
            console.print(f"[green]Created pane: {pane_id}[/green]")
            return pane_id
        except subprocess.CalledProcessError:
            return None
    
    def send_keys(self, target: str, text: str, enter: bool = True) -> bool:
        """Send keys to a specific pane."""
        try:
            args = ['send-keys', '-t', target, text]
            if enter:
                args.append('Enter')
            self._run_tmux_command(args)
            return True
        except subprocess.CalledProcessError:
            return False
    
    def send_interrupt(self, target: str) -> bool:
        """Send Ctrl-C to a pane."""
        try:
            self._run_tmux_command(['send-keys', '-t', target, 'C-c'])
            return True
        except subprocess.CalledProcessError:
            return False
    
    def capture_pane(self, target: str, start: Optional[int] = None, end: Optional[int] = None) -> str:
        """Capture the contents of a pane."""
        try:
            args = ['capture-pane', '-t', target, '-p']
            if start is not None:
                args.extend(['-S', str(start)])
            if end is not None:
                args.extend(['-E', str(end)])
            
            result = self._run_tmux_command(args)
            return result.stdout
        except subprocess.CalledProcessError:
            return ""
    
    def wait_for_prompt(self, target: str, prompt_pattern: str = "$", timeout: int = 30) -> bool:
        """Wait for a specific prompt pattern to appear."""
        start_time = time.time()
        while time.time() - start_time < timeout:
            content = self.capture_pane(target, start=-10)
            if prompt_pattern in content:
                return True
            time.sleep(0.5)
        return False
    
    def wait_for_idle(self, target: str, idle_time: int = 2, timeout: int = 30) -> bool:
        """Wait for pane to be idle (no changes)."""
        start_time = time.time()
        last_content = ""
        idle_start = None
        
        while time.time() - start_time < timeout:
            content = self.capture_pane(target)
            if content == last_content:
                if idle_start is None:
                    idle_start = time.time()
                elif time.time() - idle_start >= idle_time:
                    return True
            else:
                idle_start = None
                last_content = content
            time.sleep(0.5)
        return False
    
    def kill_pane(self, target: str) -> bool:
        """Kill a specific pane."""
        try:
            self._run_tmux_command(['kill-pane', '-t', target])
            console.print(f"[yellow]Killed pane: {target}[/yellow]")
            return True
        except subprocess.CalledProcessError:
            return False
    
    def kill_session(self, session_name: str) -> bool:
        """Kill a tmux session."""
        try:
            self._run_tmux_command(['kill-session', '-t', session_name])
            console.print(f"[yellow]Killed session: {session_name}[/yellow]")
            return True
        except subprocess.CalledProcessError:
            return False

def display_sessions(controller: TmuxController):
    """Display all tmux sessions in a table."""
    sessions = controller.list_sessions()
    if not sessions:
        console.print("[yellow]No tmux sessions found[/yellow]")
        return
    
    table = Table(title="Tmux Sessions")
    table.add_column("Name", style="cyan")
    table.add_column("Status", style="green")
    table.add_column("Windows", style="yellow")
    
    for session in sessions:
        table.add_row(session['name'], session['status'], session['windows'])
    
    console.print(table)

def display_panes(controller: TmuxController, session: Optional[str] = None):
    """Display all panes in a table."""
    panes = controller.list_panes(session)
    if not panes:
        console.print("[yellow]No panes found[/yellow]")
        return
    
    table = Table(title=f"Tmux Panes{' - ' + session if session else ''}")
    table.add_column("Session", style="cyan")
    table.add_column("Window", style="blue")
    table.add_column("Pane", style="green")
    table.add_column("Pane ID", style="yellow")
    table.add_column("Command", style="magenta")
    table.add_column("Title", style="white")
    
    for pane in panes:
        table.add_row(
            pane['session'],
            pane['window'],
            pane['pane'],
            pane['pane_id'],
            pane['command'],
            pane['title']
        )
    
    console.print(table)

def interactive_mode(controller: TmuxController):
    """Run interactive tmux control mode."""
    console.print(Panel("[bold blue]Tmux Interactive Controller[/bold blue]"))
    console.print("Commands: sessions, panes, create-session, create-pane, send, capture, kill-pane, kill-session, quit")
    
    while True:
        try:
            command = Prompt.ask("\n[bold cyan]tmux>[/bold cyan]").strip().lower()
            
            if command in ['quit', 'exit', 'q']:
                break
            elif command == 'sessions':
                display_sessions(controller)
            elif command == 'panes':
                session = Prompt.ask("Session name (optional)", default="")
                display_panes(controller, session if session else None)
            elif command == 'create-session':
                name = Prompt.ask("Session name")
                cmd = Prompt.ask("Initial command (optional)", default="")
                controller.create_session(name, cmd if cmd else None)
            elif command == 'create-pane':
                target = Prompt.ask("Target (session:window.pane)")
                cmd = Prompt.ask("Command (optional)", default="")
                vertical = Confirm.ask("Vertical split?", default=False)
                controller.create_pane(target, cmd if cmd else None, vertical)
            elif command == 'send':
                target = Prompt.ask("Target pane")
                text = Prompt.ask("Text to send")
                enter = Confirm.ask("Send Enter?", default=True)
                controller.send_keys(target, text, enter)
            elif command == 'capture':
                target = Prompt.ask("Target pane")
                content = controller.capture_pane(target)
                console.print(Panel(content, title=f"Pane {target} Content"))
            elif command == 'kill-pane':
                target = Prompt.ask("Target pane")
                if Confirm.ask(f"Kill pane {target}?"):
                    controller.kill_pane(target)
            elif command == 'kill-session':
                session = Prompt.ask("Session name")
                if Confirm.ask(f"Kill session {session}?"):
                    controller.kill_session(session)
            else:
                console.print("[red]Unknown command[/red]")
                
        except KeyboardInterrupt:
            console.print("\n[yellow]Goodbye![/yellow]")
            break
        except Exception as e:
            console.print(f"[red]Error: {e}[/red]")

def main():
    parser = argparse.ArgumentParser(description="Tmux CLI Controller")
    parser.add_argument("--sessions", action="store_true", help="List all sessions")
    parser.add_argument("--panes", action="store_true", help="List all panes")
    parser.add_argument("--session", help="Specify session for pane listing")
    parser.add_argument("--interactive", "-i", action="store_true", help="Run in interactive mode")
    parser.add_argument("--create-session", help="Create a new session")
    parser.add_argument("--create-pane", help="Create a new pane in target")
    parser.add_argument("--send", nargs=2, metavar=("TARGET", "TEXT"), help="Send text to pane")
    parser.add_argument("--capture", help="Capture pane content")
    parser.add_argument("--kill-pane", help="Kill specified pane")
    parser.add_argument("--kill-session", help="Kill specified session")
    
    args = parser.parse_args()
    
    # Check if tmux is available
    try:
        subprocess.run(['tmux', '-V'], capture_output=True, check=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        console.print("[red]Tmux is not installed or not in PATH[/red]")
        sys.exit(1)
    
    controller = TmuxController()
    
    if args.interactive:
        interactive_mode(controller)
    elif args.sessions:
        display_sessions(controller)
    elif args.panes:
        display_panes(controller, args.session)
    elif args.create_session:
        controller.create_session(args.create_session)
    elif args.create_pane:
        controller.create_pane(args.create_pane)
    elif args.send:
        target, text = args.send
        controller.send_keys(target, text)
    elif args.capture:
        content = controller.capture_pane(args.capture)
        console.print(content)
    elif args.kill_pane:
        if Confirm.ask(f"Kill pane {args.kill_pane}?"):
            controller.kill_pane(args.kill_pane)
    elif args.kill_session:
        if Confirm.ask(f"Kill session {args.kill_session}?"):
            controller.kill_session(args.kill_session)
    else:
        parser.print_help()

if __name__ == "__main__":
    main()